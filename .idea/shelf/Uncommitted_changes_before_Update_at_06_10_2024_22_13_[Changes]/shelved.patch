Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import webbrowser\r\nimport pygetwindow\r\nimport time\r\nimport os\r\nimport pyautogui\r\nimport PIL\r\n\r\nimport imutils\r\nimport cv2\r\nfrom matplotlib import pyplot as plt\r\nimport numpy as np\r\nfrom pywinauto.application import Application\r\nfrom pywinauto.keyboard import send_keys\r\nfrom pywinauto.mouse import click, press\r\n\r\nimport main\r\nimport window\r\nfrom auto_laile import PressKey, ReleaseKey\r\nfrom itertools import cycle\r\n\r\n\r\nclass Button():\r\n    def Cycle(self):\r\n        image = cv2.imread('D:\\Project_University\\Auto_rostelecom\\image\\p.png')\r\n        while True:\r\n            click(button='left', coords=(908, 673)), (\r\n                click(button='left', coords=(927, 721)))  # coordinate cursor button\r\n            click(button='left', coords=(939, 590)), (\r\n                click(button='left', coords=(846, 712)))  # coordinate cursor button\r\n            low_red = (45, 45, 255)\r\n            high_red = (45, 45, 255)\r\n            red_error = cv2.inRange(image, low_red, high_red)\r\n            # cv2.imwrite(\"output.jpg\", only_cat)\r\n            # cv2.imshow('only car', only_cat)\r\n            # cv2.waitKey(0)\r\n            list_button_speed = 0x39\r\n            total = 0\r\n            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\r\n\r\n            blur = cv2.GaussianBlur(gray, (11, 11), 0)\r\n            canny = cv2.Canny(blur, 30, 150, 3)\r\n            dilated = cv2.dilate(canny, (1, 1), iterations=0)\r\n\r\n            (cnt, hierarchy) = cv2.findContours(\r\n                dilated.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\r\n            rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\r\n            cv2.drawContours(rgb, cnt, -1, (0, 255, 0), 2)\r\n\r\n            if len(cnt) > 0:\r\n                time.sleep(1)\r\n                KEYS = list_button_speed\r\n                PressKey(KEYS)\r\n                time.sleep(1)\r\n                ReleaseKey(KEYS)\r\n                print('Doneeeeeeeeeeeeeeeee!!!!')\r\n                # screen = main.Screetake()\r\n                # screen.screen()\r\n            else:\r\n                time.sleep(3)\r\n                print('Error!!!!')\r\n                screen = window.Screetake()\r\n                screen.screen()\r\n# # img_contou = np.uint8(np.zeros((image.shape[2],edged.shape[1])))\r\n# # cv2.imshow('countour',img_contou)\r\n# cv2.imwrite(\"output.jpg\", image)\r\n#                     cv2.imshow('result', image) # выводим итоговое изображение в окно\r\n#                     cv2.waitKey()\r\n#                     cv2.destroyAllWindows()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 26c45d41752c3d8ae424783c4c190ee555387420)
+++ b/main.py	(date 1728241887482)
@@ -1,23 +1,8 @@
-import webbrowser
-import pygetwindow
 import time
-import os
-import pyautogui
-import PIL
-
-import imutils
 import cv2
-from matplotlib import pyplot as plt
-import numpy as np
-from pywinauto.application import Application
-from pywinauto.keyboard import send_keys
-from pywinauto.mouse import click, press
-
-import main
-import window
+from pywinauto.mouse import click
+from window import Screentake
 from auto_laile import PressKey, ReleaseKey
-from itertools import cycle
-
 
 class Button():
     def Cycle(self):
@@ -30,7 +15,7 @@
             low_red = (45, 45, 255)
             high_red = (45, 45, 255)
             red_error = cv2.inRange(image, low_red, high_red)
-            # cv2.imwrite("output.jpg", only_cat)
+            cv2.imwrite("output.jpg", red_error)
             # cv2.imshow('only car', only_cat)
             # cv2.waitKey(0)
             list_button_speed = 0x39
@@ -53,16 +38,15 @@
                 time.sleep(1)
                 ReleaseKey(KEYS)
                 print('Doneeeeeeeeeeeeeeeee!!!!')
-                # screen = main.Screetake()
-                # screen.screen()
             else:
                 time.sleep(3)
                 print('Error!!!!')
-                screen = window.Screetake()
-                screen.screen()
 # # img_contou = np.uint8(np.zeros((image.shape[2],edged.shape[1])))
 # # cv2.imshow('countour',img_contou)
 # cv2.imwrite("output.jpg", image)
 #                     cv2.imshow('result', image) # выводим итоговое изображение в окно
 #                     cv2.waitKey()
-#                     cv2.destroyAllWindows()
\ No newline at end of file
+#                     cv2.destroyAllWindows()
+if __name__ == '__main__':
+    button = Button()
+    button.Cycle()
\ No newline at end of file
Index: window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import webbrowser\r\nimport pygetwindow\r\nimport time\r\nimport os\r\nimport pyautogui\r\nimport PIL\r\n\r\nimport imutils\r\nimport cv2\r\nfrom matplotlib import pyplot as plt\r\nimport numpy as np\r\nfrom pywinauto.application import Application\r\nfrom pywinauto.keyboard import send_keys\r\nfrom pywinauto.mouse import click, press\r\n\r\nimport main\r\nfrom auto_laile import PressKey,ReleaseKey\r\nfrom itertools import cycle\r\nimport window\r\n\r\nwebbrowser.open('https://rt.habr.io/game')\r\ntime.sleep(10)\r\n# get screensize\r\nx,y = pyautogui.size()\r\nprint(f\"width={x}\\theight={y}\")\r\n\r\nx2,y2 = pyautogui.size()\r\nx2,y2=int(str(x2)),int(str(y2))\r\nprint(x2//2)\r\nprint(y2//2)\r\n\r\n# find new window title\r\nz1 = pygetwindow.getAllTitles()\r\ntime.sleep(1)\r\nprint(len(z1))\r\n# # test with pictures folder\r\n# os.startfile(\"D:\\Project_University\\Auto_rostelecom/image\")\r\n# time.sleep(1)\r\n# z2 = pygetwindow.getAllTitles()\r\n# print(len(z2))\r\n# time.sleep(1)\r\n# z3 = [x for x in z2 if x not in z1]\r\n# z3 = ''.join(z3)\r\n# time.sleep(3)\r\n\r\n# also able to edit z3 to specified window-title string like: \"Sublime Text (UNREGISTERED)\"\r\n# my = pygetwindow.getWindowsWithTitle(z3)[0]\r\n# # quarter of screen screensize\r\n# x3 = x2 // 2\r\n# y3 = y2 // 2\r\n# my.resizeTo(x3,y3)\r\n# # top-left\r\n# my.moveTo(0, 0)\r\n# time.sleep(3)\r\n# my.activate()\r\n# time.sleep(1)\r\nclass Screentake():\r\n    def screen(self):\r\n        while True:\r\n# save screenshot\r\n            p = pyautogui.screenshot()\r\n            p.save(r'D:\\Project_University\\Auto_rostelecom/image/p.png')\r\n            print('Screen!!!!')\r\n# # edit screenshot\r\n# im = PIL.Image.open('D:\\Project_University\\Auto_rostelecom/image\\\\p.png')\r\n# im_crop = im.crop((0, 0, x3, y3))\r\n# im_crop.save('D:\\Project_University\\Auto_rostelecom/image\\\\p.jpg', quality=100)\r\n\r\n# close window\r\n            time.sleep(1)\r\n                                #class example\r\n            button = main.Button()\r\n            button.Cycle()\r\n            screen = Screentake()\r\n            screen.screen()\r\n# my.close()\r\n# Opening image\r\n#     img = cv2.imread(\"D:\\Project_University\\Auto_rostelecom\\image\\p.png\")\r\n#-------------------------------------------------------------------------------------\r\n\r\n# gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\r\n# gray = cv2.GaussianBlur(gray, (3, 3), 0)\r\n# cv2.imwrite(\"gray.jpg\", gray)\r\n# #---------------------------------------------------------------------------------\r\n# edged = cv2.Canny(gray, 10, 250)\r\n# cv2.imwrite(\"edged.jpg\", edged)\r\n# #--------------------------------------------------------------------------------\r\n# # kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))\r\n# # closed = cv2.morphologyEx(edged, cv2.MORPH_CLOSE, kernel)\r\n# # cv2.imwrite(\"closed.jpg\", closed)\r\n#\r\n#\r\n# #search counters\r\n# cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\r\n# cnts = imutils.grab_contours(cnts)\r\n# total = 0\r\n#\r\n# img_contou = np.uint8(np.zeros((image.shape[2],image.shape[1])))\r\n#\r\n#\r\n#\r\n# cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\r\n# cnts = imutils.grab_contours(cnts)\r\n# total = 0\r\n\r\n# cv2.imshow('origin', image) # выводим итоговое изображение в окно\r\n# cv2.imshow('res', edged) # выводим итоговое изображение в окно\r\n\r\n# # цикл по контурам\r\n# for c in cnts:\r\n#     # аппроксимируем (сглаживаем) контур\r\n#     peri = cv2.arcLength(c, True)\r\n#     approx = cv2.approxPolyDP(c, 0.02 * peri, True)\r\n#\r\n#     # если у контура 4 вершины, предполагаем, что это книга\r\n#     if len(approx) == 9:\r\n#         cv2.drawContours(image, [approx], -1, (0, 255, 0), 4)\r\n#         total += 1\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/window.py b/window.py
--- a/window.py	(revision 26c45d41752c3d8ae424783c4c190ee555387420)
+++ b/window.py	(date 1728241887475)
@@ -1,22 +1,7 @@
-import webbrowser
-import pygetwindow
 import time
-import os
+import webbrowser
 import pyautogui
-import PIL
-
-import imutils
-import cv2
-from matplotlib import pyplot as plt
-import numpy as np
-from pywinauto.application import Application
-from pywinauto.keyboard import send_keys
-from pywinauto.mouse import click, press
-
-import main
-from auto_laile import PressKey,ReleaseKey
-from itertools import cycle
-import window
+import pygetwindow
 
 webbrowser.open('https://rt.habr.io/game')
 time.sleep(10)
@@ -33,27 +18,7 @@
 z1 = pygetwindow.getAllTitles()
 time.sleep(1)
 print(len(z1))
-# # test with pictures folder
-# os.startfile("D:\Project_University\Auto_rostelecom/image")
-# time.sleep(1)
-# z2 = pygetwindow.getAllTitles()
-# print(len(z2))
-# time.sleep(1)
-# z3 = [x for x in z2 if x not in z1]
-# z3 = ''.join(z3)
-# time.sleep(3)
 
-# also able to edit z3 to specified window-title string like: "Sublime Text (UNREGISTERED)"
-# my = pygetwindow.getWindowsWithTitle(z3)[0]
-# # quarter of screen screensize
-# x3 = x2 // 2
-# y3 = y2 // 2
-# my.resizeTo(x3,y3)
-# # top-left
-# my.moveTo(0, 0)
-# time.sleep(3)
-# my.activate()
-# time.sleep(1)
 class Screentake():
     def screen(self):
         while True:
@@ -61,59 +26,12 @@
             p = pyautogui.screenshot()
             p.save(r'D:\Project_University\Auto_rostelecom/image/p.png')
             print('Screen!!!!')
-# # edit screenshot
-# im = PIL.Image.open('D:\Project_University\Auto_rostelecom/image\\p.png')
-# im_crop = im.crop((0, 0, x3, y3))
-# im_crop.save('D:\Project_University\Auto_rostelecom/image\\p.jpg', quality=100)
-
-# close window
             time.sleep(1)
+
                                 #class example
-            button = main.Button()
-            button.Cycle()
-            screen = Screentake()
-            screen.screen()
-# my.close()
-# Opening image
-#     img = cv2.imread("D:\Project_University\Auto_rostelecom\image\p.png")
-#-------------------------------------------------------------------------------------
+if __name__ == '__main__':
+    screen = Screentake()
+    screen.screen()
 
-# gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
-# gray = cv2.GaussianBlur(gray, (3, 3), 0)
-# cv2.imwrite("gray.jpg", gray)
-# #---------------------------------------------------------------------------------
-# edged = cv2.Canny(gray, 10, 250)
-# cv2.imwrite("edged.jpg", edged)
-# #--------------------------------------------------------------------------------
-# # kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))
-# # closed = cv2.morphologyEx(edged, cv2.MORPH_CLOSE, kernel)
-# # cv2.imwrite("closed.jpg", closed)
-#
-#
-# #search counters
-# cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
-# cnts = imutils.grab_contours(cnts)
-# total = 0
-#
-# img_contou = np.uint8(np.zeros((image.shape[2],image.shape[1])))
-#
-#
-#
-# cnts = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
-# cnts = imutils.grab_contours(cnts)
-# total = 0
 
-# cv2.imshow('origin', image) # выводим итоговое изображение в окно
-# cv2.imshow('res', edged) # выводим итоговое изображение в окно
-
-# # цикл по контурам
-# for c in cnts:
-#     # аппроксимируем (сглаживаем) контур
-#     peri = cv2.arcLength(c, True)
-#     approx = cv2.approxPolyDP(c, 0.02 * peri, True)
-#
-#     # если у контура 4 вершины, предполагаем, что это книга
-#     if len(approx) == 9:
-#         cv2.drawContours(image, [approx], -1, (0, 255, 0), 4)
-#         total += 1
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c1c62218-826a-410b-8ff5-ef04bb38a90d\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/Auto_rostelecom.iml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/modules.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/auto_laile.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/stop_data.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/vvvv.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/window.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2n473fwA7rCNzGO1fLm8SaoH2L0\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.img_boxes.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.window.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\Project_University\\Auto_rostelecom\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Auto_rostelecom\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-98f27166c754-ba05f1cad1b1-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.21829.153\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c1c62218-826a-410b-8ff5-ef04bb38a90d\" name=\"Changes\" comment=\"\" />\r\n      <created>1728220296986</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728220296986</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 26c45d41752c3d8ae424783c4c190ee555387420)
+++ b/.idea/workspace.xml	(date 1728241887535)
@@ -5,18 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="c1c62218-826a-410b-8ff5-ef04bb38a90d" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/Auto_rostelecom.iml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/profiles_settings.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/auto_laile.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/stop_data.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/vvvv.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/window.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/auto_games.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/image/p.png" beforeDir="false" afterPath="$PROJECT_DIR$/image/p.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/window.py" beforeDir="false" afterPath="$PROJECT_DIR$/window.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -33,6 +26,18 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;kruglovbogL&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/kruglovbogL/autoRostelecom&quot;,
+    &quot;accountId&quot;: &quot;7e5657a3-baa8-44a8-83ef-38d6d4727b46&quot;
+  }
+}</component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 4
 }</component>
@@ -42,15 +47,17 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Python.img_boxes.executor&quot;: &quot;Run&quot;,
-    &quot;Python.main.executor&quot;: &quot;Run&quot;,
-    &quot;Python.window.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;master&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Python.auto_games.executor": "Run",
+    "Python.img_boxes.executor": "Run",
+    "Python.main.executor": "Run",
+    "Python.window.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "master",
+    "ignore.virus.scanning.warn.message": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="D:\Project_University\Auto_rostelecom" />
@@ -96,6 +103,19 @@
       <option name="presentableId" value="Default" />
       <updated>1728220296986</updated>
     </task>
+    <task id="LOCAL-00001" summary="add_new">
+      <option name="closed" value="true" />
+      <created>1728239936376</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1728239936376</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="add_new" />
+    <option name="LAST_COMMIT_MESSAGE" value="add_new" />
+  </component>
 </project>
\ No newline at end of file
Index: auto_games.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auto_games.py b/auto_games.py
new file mode 100644
--- /dev/null	(date 1728241692374)
+++ b/auto_games.py	(date 1728241692374)
@@ -0,0 +1,10 @@
+import main
+import window
+
+
+
+while True:
+    button = main.Button()
+    button.Cycle()
+    screen = window.Screentake()
+    screen.screen()
\ No newline at end of file
